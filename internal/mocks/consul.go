// Code generated by MockGen. DO NOT EDIT.
// Source: consul.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/hashicorp/consul/api"
)

// Mockservicer is a mock of servicer interface.
type Mockservicer struct {
	ctrl     *gomock.Controller
	recorder *MockservicerMockRecorder
}

// MockservicerMockRecorder is the mock recorder for Mockservicer.
type MockservicerMockRecorder struct {
	mock *Mockservicer
}

// NewMockservicer creates a new mock instance.
func NewMockservicer(ctrl *gomock.Controller) *Mockservicer {
	mock := &Mockservicer{ctrl: ctrl}
	mock.recorder = &MockservicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockservicer) EXPECT() *MockservicerMockRecorder {
	return m.recorder
}

// Service mocks base method.
func (m *Mockservicer) Service(arg0, arg1 string, arg2 bool, arg3 *api.QueryOptions) ([]*api.ServiceEntry, *api.QueryMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Service", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*api.ServiceEntry)
	ret1, _ := ret[1].(*api.QueryMeta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Service indicates an expected call of Service.
func (mr *MockservicerMockRecorder) Service(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Service", reflect.TypeOf((*Mockservicer)(nil).Service), arg0, arg1, arg2, arg3)
}

// Mockquerier is a mock of querier interface.
type Mockquerier struct {
	ctrl     *gomock.Controller
	recorder *MockquerierMockRecorder
}

// MockquerierMockRecorder is the mock recorder for Mockquerier.
type MockquerierMockRecorder struct {
	mock *Mockquerier
}

// NewMockquerier creates a new mock instance.
func NewMockquerier(ctrl *gomock.Controller) *Mockquerier {
	mock := &Mockquerier{ctrl: ctrl}
	mock.recorder = &MockquerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockquerier) EXPECT() *MockquerierMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *Mockquerier) Execute(arg0 string, arg1 *api.QueryOptions) (*api.PreparedQueryExecuteResponse, *api.QueryMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1)
	ret0, _ := ret[0].(*api.PreparedQueryExecuteResponse)
	ret1, _ := ret[1].(*api.QueryMeta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Execute indicates an expected call of Execute.
func (mr *MockquerierMockRecorder) Execute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*Mockquerier)(nil).Execute), arg0, arg1)
}
